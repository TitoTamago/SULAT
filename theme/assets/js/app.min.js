<<<<<<< HEAD
!(function (n) {
    "use strict";
    function t() {
        (this.body = n("body")), (this.window = n(window)), (this.menuContainer = n("#leftside-menu-container"));
    }
    (t.prototype._reset = function () {
        this.body.removeAttr("data-leftbar-theme");
    }),
        (t.prototype.activateCondensedSidebar = function () {
            this.body.attr("data-leftbar-compact-mode", "condensed");
        }),
        (t.prototype.deactivateCondensedSidebar = function () {
            this.body.removeAttr("data-leftbar-compact-mode");
        }),
        (t.prototype.activateScrollableSidebar = function () {
            this.body.attr("data-leftbar-compact-mode", "scrollable");
        }),
        (t.prototype.deactivateScrollableSidebar = function () {
            this.body.removeAttr("data-leftbar-compact-mode");
        }),
        (t.prototype.activateDefaultTheme = function () {
            this._reset(), this.body.attr("data-leftbar-theme", "default");
        }),
        (t.prototype.activateLightTheme = function () {
            this._reset(), this.body.attr("data-leftbar-theme", "light");
        }),
        (t.prototype.activateDarkTheme = function () {
            this._reset(), this.body.attr("data-leftbar-theme", "dark");
        }),
        (t.prototype.initMenu = function () {
            var t,
                e = this;
            this._reset(),
                n(document).on("click", ".button-menu-mobile", function (t) {
                    t.preventDefault(),
                        e.body.toggleClass("sidebar-enable"),
                        "full" === e.body.attr("data-layout") || e.window.width() < 768
                            ? e.body.toggleClass("hide-menu")
                            : "condensed" === e.body.attr("data-leftbar-compact-mode")
                            ? e.deactivateCondensedSidebar()
                            : e.activateCondensedSidebar();
                }),
                n(".side-nav").length &&
                    ((t = n(".side-nav li .collapse")),
                    n(".side-nav li [data-bs-toggle='collapse']").on("click", function (t) {
                        return !1;
                    }),
                    t.on({
                        "show.bs.collapse": function (t) {
                            var e = n(t.target).parents(".collapse.show");
                            n(".side-nav .collapse.show").not(t.target).not(e).collapse("hide");
                        },
                    }),
                    n(".side-nav a").each(function () {
                        var t,
                            e,
                            a,
                            o = window.location.href.split(/[?#]/)[0];
                        this.href == o &&
                            (n(this).addClass("active"),
                            n(this).parent().addClass("menuitem-active"),
                            n(this).parent().parent().parent().addClass("show"),
                            n(this).parent().parent().parent().parent().addClass("menuitem-active"),
                            "sidebar-menu" !== (t = n(this).parent().parent().parent().parent().parent().parent()).attr("id") && t.addClass("show"),
                            n(this).parent().parent().parent().parent().parent().parent().parent().addClass("menuitem-active"),
                            "wrapper" !== (e = n(this).parent().parent().parent().parent().parent().parent().parent().parent().parent()).attr("id") && e.addClass("show"),
                            (a = n(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent()).is("body") || a.addClass("menuitem-active"));
                    }));
            var a = document.querySelectorAll("ul.navbar-nav .dropdown .dropdown-toggle"),
                o = !1;
            a.forEach(function (a) {
                a.addEventListener("click", function (t) {
                    var e;
                    a.parentElement.classList.contains("nav-item") ||
                        ((o = !0),
                        (e = a.parentElement.parentElement.parentElement.querySelector(".nav-link")),
                        bootstrap.Dropdown.getInstance(e).show(),
                        a.ariaExpanded ? bootstrap.Dropdown.getInstance(a).hide() : bootstrap.Dropdown.getInstance(e).show(),
                        (o = !0));
                }),
                    a.addEventListener("hide.bs.dropdown", function (t) {
                        o && (t.preventDefault(), t.stopPropagation(), (o = !1));
                    }),
                    a.addEventListener("show.bs.dropdown", function (t) {
                        o || a.parentElement.classList.contains("nav-item") || (t.preventDefault(), t.stopPropagation(), (o = !0));
                    });
            });
        }),
        (t.prototype.init = function () {
            this.initMenu();
        }),
        (n.LeftSidebar = new t()),
        (n.LeftSidebar.Constructor = t);
})(window.jQuery),
    (function (a) {
        "use strict";
        function t() {
            (this.$body = a("body")), (this.$window = a(window));
        }
        (t.prototype.initMenu = function () {
            a(".topnav-menu").length &&
                (a(".topnav-menu li a").each(function () {
                    var t = window.location.href.split(/[?#]/)[0];
                    this.href == t &&
                        (a(this).addClass("active"),
                        a(this).parent().parent().addClass("active"),
                        a(this).parent().parent().parent().parent().addClass("active"),
                        a(this).parent().parent().parent().parent().parent().parent().addClass("active"));
                }),
                a(".navbar-toggle").on("click", function () {
                    a(this).toggleClass("open"), a("#navigation").slideToggle(400);
                }));
        }),
            (t.prototype.initSearch = function () {
                var e = a(".navbar-custom .dropdown:not(.app-search)");
                a(document).on("click", function (t) {
                    return "top-search" == t.target.id || t.target.closest("#search-dropdown") ? a("#search-dropdown").addClass("d-block") : a("#search-dropdown").removeClass("d-block"), !0;
                }),
                    a("#top-search").on("focus", function (t) {
                        return t.preventDefault(), e.children(".dropdown-menu.show").removeClass("show"), a("#search-dropdown").addClass("d-block"), !1;
                    }),
                    e.on("show.bs.dropdown", function () {
                        a("#search-dropdown").removeClass("d-block");
                    });
            }),
            (t.prototype.init = function () {
                this.initMenu(), this.initSearch();
            }),
            (a.Topbar = new t()),
            (a.Topbar.Constructor = t);
    })(window.jQuery),
    (function (a) {
        "use strict";
        function t() {
            (this.body = a("body")), (this.window = a(window));
        }
        (t.prototype._selectOptionsFromConfig = function () {
            var t = a.App.getLayoutConfig();
            if (t) {
                switch ((a(".end-bar input[type=checkbox]").prop("checked", !1), t.sideBarTheme)) {
                    case "default":
                        a("#default-check").prop("checked", !0);
                        break;
                    case "light":
                        a("#light-check").prop("checked", !0);
                        break;
                    case "dark":
                        a("#dark-check").prop("checked", !0);
                }
                t.isBoxed ? a("#boxed-check").prop("checked", !0) : a("#fluid-check").prop("checked", !0),
                    t.isCondensed && a("#condensed-check").prop("checked", !0),
                    t.isScrollable && a("#scrollable-check").prop("checked", !0),
                    t.isScrollable || t.isCondensed || a("#fixed-check").prop("checked", !0),
                    t.isDarkModeEnabled || (a("#light-mode-check").prop("checked", !0), "vertical" === t.layout && a("input[type=checkbox][name=theme]").prop("disabled", !1)),
                    t.isDarkModeEnabled && (a("#dark-mode-check").prop("checked", !0), "vertical" === t.layout && a("input[type=checkbox][name=theme]").prop("disabled", !1));
            }
        }),
            (t.prototype.toggleRightSideBar = function () {
                this.body.toggleClass("end-bar-enabled"), this._selectOptionsFromConfig();
            }),
            (t.prototype.init = function () {
                var e = this;
                "true" == document.body.getAttribute("data-rightbar-onstart") && (localStorage.getItem("_HYPER_VISITED") || (localStorage.setItem("_HYPER_VISITED", !0), e.toggleRightSideBar())),
                    a(document).on("click", ".end-bar-toggle", function () {
                        e.toggleRightSideBar();
                    }),
                    a(document).on("click", "body", function (t) {
                        0 < a(t.target).closest(".end-bar-toggle, .end-bar").length ||
                            0 < a(t.target).closest(".leftside-menu, .side-nav").length ||
                            a(t.target).hasClass("button-menu-mobile") ||
                            0 < a(t.target).closest(".button-menu-mobile").length ||
                            (a("body").removeClass("end-bar-enabled"), a("body").removeClass("sidebar-enable"));
                    }),
                    a("input[type=checkbox][name=width]").change(function () {
                        switch (a(this).val()) {
                            case "fluid":
                                a.App.activateFluid();
                                break;
                            case "boxed":
                                a.App.activateBoxed();
                        }
                        e._selectOptionsFromConfig();
                    }),
                    a("input[type=checkbox][name=theme]").change(function () {
                        switch (a(this).val()) {
                            case "default":
                                a.App.activateDefaultSidebarTheme();
                                break;
                            case "light":
                                a.App.activateLightSidebarTheme();
                                break;
                            case "dark":
                                a.App.activateDarkSidebarTheme();
                        }
                        e._selectOptionsFromConfig();
                    }),
                    a("input[type=checkbox][name=compact]").change(function () {
                        switch (a(this).val()) {
                            case "fixed":
                                a.App.deactivateCondensedSidebar(), a.App.deactivateScrollableSidebar();
                                break;
                            case "scrollable":
                                a.App.activateScrollableSidebar();
                                break;
                            case "condensed":
                                a.App.activateCondensedSidebar();
                        }
                        e._selectOptionsFromConfig();
                    }),
                    a("input[type=checkbox][name=color-scheme-mode]").change(function () {
                        switch (a(this).val()) {
                            case "light":
                                a.App.deactivateDarkMode(), a("#default-check").prop("checked", !0), a("input[type=checkbox][name=theme]").prop("disabled", !1);
                                break;
                            case "dark":
                                a.App.activateDarkMode(), a("#dark-check").prop("checked", !0);
                        }
                        e._selectOptionsFromConfig();
                    }),
                    a("#resetBtn").on("click", function (t) {
                        t.preventDefault(),
                            a.App.resetLayout(function () {
                                e._selectOptionsFromConfig();
                            });
                    });
            }),
            (a.RightBar = new t()),
            (a.RightBar.Constructor = t);
    })(window.jQuery),
    (function (a) {
        "use strict";
        function t() {
            (this.body = a("body")), (this.window = a(window)), (this._config = {}), (this.defaultSelectedStyle = null);
        }
        var e = "default",
            o = "light",
            n = "dark",
            i = { sideBarTheme: e, isBoxed: !1, isCondensed: !1, isScrollable: !1, isDarkModeEnabled: !1 };
        (t.prototype._saveConfig = function (t) {
            a.extend(this._config, t);
        }),
            (t.prototype._getStoredConfig = function () {
                var t = i,
                    e = this.body.attr("data-layout-color");
                e && "dark" == e && (t.isDarkModeEnabled = !0), (t.sideBarTheme = this.body.attr("data-leftbar-theme")), "boxed" === this.body.attr("data-layout-mode") && (t.isBoxed = !0);
                var a = this.body.attr("data-leftbar-compact-mode");
                return "condensed" === a ? (t.isCondensed = !0) : "scrollable" === a && (t.isScrollable = !0), t;
            }),
            (t.prototype._applyConfig = function () {
                var t = this;
                switch (((this._config = this._getStoredConfig()), a.LeftSidebar.init(), t._config.sideBarTheme)) {
                    case n:
                        t.activateDarkSidebarTheme();
                        break;
                    case o:
                        t.activateLightSidebarTheme();
                        break;
                    case e:
                        t.activateDefaultSidebarTheme();
                }
                t._config.isDarkModeEnabled ? t.activateDarkMode() : t.deactivateDarkMode(),
                    t._config.isBoxed && t.activateBoxed(),
                    t._config.isCondensed && t.activateCondensedSidebar(),
                    t._config.isScrollable && t.activateScrollableSidebar();
            }),
            (t.prototype._adjustLayout = function () {
                var t;
                750 <= this.window.width() && this.window.width() <= 1028
                    ? this.activateCondensedSidebar(!0)
                    : (t = this._getStoredConfig()).isCondensed || t.isScrollable || this.deactivateCondensedSidebar();
            }),
            (t.prototype.activateFluid = function () {
                this._saveConfig({ isBoxed: !1 }), this.body.attr("data-layout-mode", "fluid");
            }),
            (t.prototype.activateBoxed = function () {
                this._saveConfig({ isBoxed: !0 }), this.body.attr("data-layout-mode", "boxed");
            }),
            (t.prototype.activateCondensedSidebar = function (t) {
                t || this._saveConfig({ isCondensed: !0, isScrollable: !1 }), a.LeftSidebar.activateCondensedSidebar();
            }),
            (t.prototype.deactivateCondensedSidebar = function () {
                this._saveConfig({ isCondensed: !1 }), a.LeftSidebar.deactivateCondensedSidebar();
            }),
            (t.prototype.activateScrollableSidebar = function () {
                this._saveConfig({ isScrollable: !0, isCondensed: !1 }), a.LeftSidebar.activateScrollableSidebar();
            }),
            (t.prototype.deactivateScrollableSidebar = function () {
                this._saveConfig({ isScrollable: !1 }), a.LeftSidebar.deactivateScrollableSidebar();
            }),
            (t.prototype.activateDefaultSidebarTheme = function () {
                a.LeftSidebar.activateDefaultTheme(), this._saveConfig({ sideBarTheme: e });
            }),
            (t.prototype.activateLightSidebarTheme = function () {
                a.LeftSidebar.activateLightTheme(), this._saveConfig({ sideBarTheme: o });
            }),
            (t.prototype.activateDarkSidebarTheme = function () {
                a.LeftSidebar.activateDarkTheme(), this._saveConfig({ sideBarTheme: n });
            }),
            (t.prototype.activateDarkMode = function () {
                document.body.setAttribute("data-layout-color", "dark"),
                    "detached" === !this.body.attr("data-layout")
                        ? (a.LeftSidebar.activateDarkTheme(), this._saveConfig({ isDarkModeEnabled: !0, sideBarTheme: n }))
                        : this._saveConfig({ isDarkModeEnabled: !0 });
            }),
            (t.prototype.deactivateDarkMode = function () {
                document.body.setAttribute("data-layout-color", "light"), this._saveConfig({ isDarkModeEnabled: !1 });
            }),
            (t.prototype.clearSavedConfig = function () {
                this._config = i;
            }),
            (t.prototype.getConfig = function () {
                return this._config;
            }),
            (t.prototype.reset = function (t) {
                this.clearSavedConfig();
                var e = this;
                a("#main-style-container").length && (e.defaultSelectedStyle = a("#main-style-container").attr("href")),
                    e.deactivateCondensedSidebar(),
                    e.deactivateDarkMode(),
                    e.activateDefaultSidebarTheme(),
                    e.activateFluid(),
                    t();
            }),
            (t.prototype.init = function () {
                var e = this;
                a("#main-style-container").length && (e.defaultSelectedStyle = a("#main-style-container").attr("href")),
                    this._applyConfig(),
                    this._adjustLayout(),
                    this.window.on("resize", function (t) {
                        t.preventDefault(), e._adjustLayout();
                    }),
                    a.Topbar.init();
            }),
            (a.LayoutThemeApp = new t()),
            (a.LayoutThemeApp.Constructor = t);
    })(window.jQuery),
    (function (n) {
        "use strict";
        function t() {
            (this.$body = n("body")), (this.$portletIdentifier = ".card"), (this.$portletCloser = '.card a[data-bs-toggle="remove"]'), (this.$portletRefresher = '.card a[data-bs-toggle="reload"]');
        }
        (t.prototype.init = function () {
            var o = this;
            n(document).on("click", this.$portletCloser, function (t) {
                t.preventDefault();
                var e = n(this).closest(o.$portletIdentifier),
                    a = e.parent();
                e.remove(), 0 == a.children().length && a.remove();
            }),
                n(document).on("click", this.$portletRefresher, function (t) {
                    t.preventDefault();
                    var e = n(this).closest(o.$portletIdentifier);
                    e.append('<div class="card-disabled"><div class="card-portlets-loader"></div></div>');
                    var a = e.find(".card-disabled");
                    setTimeout(function () {
                        a.fadeOut("fast", function () {
                            a.remove();
                        });
                    }, 500 + 5 * Math.random() * 300);
                });
        }),
            (n.Portlet = new t()),
            (n.Portlet.Constructor = t);
    })(window.jQuery),
    (function (i) {
        "use strict";
        function t() {
            (this.$body = i("body")), (this.$window = i(window));
        }
        (t.prototype.initSelect2 = function () {
            i('[data-toggle="select2"]').select2();
        }),
            (t.prototype.initMask = function () {
                i('[data-toggle="input-mask"]').each(function (t, e) {
                    var a = i(e).data("maskFormat"),
                        o = i(e).data("reverse");
                    null != o ? i(e).mask(a, { reverse: o }) : i(e).mask(a);
                });
            }),
            (t.prototype.initDateRange = function () {
                var o = { cancelClass: "btn-light", applyButtonClasses: "btn-success" };
                i('[data-toggle="date-picker"]').each(function (t, e) {
                    var a = i.extend({}, o, i(e).data());
                    i(e).daterangepicker(a);
                });
                var n = {
                    startDate: moment().subtract(29, "days"),
                    endDate: moment(),
                    ranges: {
                        Today: [moment(), moment()],
                        Yesterday: [moment().subtract(1, "days"), moment().subtract(1, "days")],
                        "Last 7 Days": [moment().subtract(6, "days"), moment()],
                        "Last 30 Days": [moment().subtract(29, "days"), moment()],
                        "This Month": [moment().startOf("month"), moment().endOf("month")],
                        "Last Month": [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")],
                    },
                };
                i('[data-toggle="date-picker-range"]').each(function (t, e) {
                    var a = i.extend({}, n, i(e).data()),
                        o = a.targetDisplay;
                    i(e).daterangepicker(a, function (t, e) {
                        o && i(o).html(t.format("MMMM D, YYYY") + " - " + e.format("MMMM D, YYYY"));
                    });
                });
            }),
            (t.prototype.initTimePicker = function () {
                var o = { showSeconds: !0, icons: { up: "mdi mdi-chevron-up", down: "mdi mdi-chevron-down" } };
                i('[data-toggle="timepicker"]').each(function (t, e) {
                    var a = i.extend({}, o, i(e).data());
                    i(e).timepicker(a);
                });
            }),
            (t.prototype.initTouchspin = function () {
                var o = {};
                i('[data-toggle="touchspin"]').each(function (t, e) {
                    var a = i.extend({}, o, i(e).data());
                    i(e).TouchSpin(a);
                });
            }),
            (t.prototype.initMaxlength = function () {
                var o = { warningClass: "badge bg-success", limitReachedClass: "badge bg-danger", separator: " out of ", preText: "You typed ", postText: " chars available.", placement: "bottom" };
                i('[data-toggle="maxlength"]').each(function (t, e) {
                    var a = i.extend({}, o, i(e).data());
                    i(e).maxlength(a);
                });
            }),
            (t.prototype.init = function () {
                this.initSelect2(), this.initMask(), this.initDateRange(), this.initTimePicker(), this.initTouchspin(), this.initMaxlength();
            }),
            (i.AdvanceFormApp = new t()),
            (i.AdvanceFormApp.Constructor = t);
    })(window.jQuery),
    (function (c) {
        "use strict";
        function t() {}
        (t.prototype.send = function (t, e, a, o, n, i, r, s) {
            var d = { heading: t, text: e, position: a, loaderBg: o, icon: n, hideAfter: (i = i || 3e3), stack: (r = r || 1) };
            (d.showHideTransition = s || "fade"), c.toast().reset("all"), c.toast(d);
        }),
            (c.NotificationApp = new t()),
            (c.NotificationApp.Constructor = t);
    })(window.jQuery),
    (function (a) {
        "use strict";
        function t() {}
        (t.prototype.initTooltipPlugin = function () {
            a.fn.tooltip && a('[data-toggle="tooltip"]').tooltip();
        }),
            (t.prototype.initPopoverPlugin = function () {
                a.fn.popover &&
                    a('[data-bs-toggle="popover"]').each(function (t, e) {
                        a(this).popover();
                    });
            }),
            (t.prototype.initToastPlugin = function () {
                a.fn.toast && a('[data-toggle="toast"]').toast();
            }),
            (t.prototype.initFormValidation = function () {
                a(".needs-validation").on("submit", function (t) {
                    return a(this).addClass("was-validated"), !1 !== a(this)[0].checkValidity() || (t.preventDefault(), t.stopPropagation(), !1);
                });
            }),
            (t.prototype.initShowHidePassword = function () {
                a("[data-password]").on("click", function () {
                    "false" == a(this).attr("data-password")
                        ? (a(this).siblings("input").attr("type", "text"), a(this).attr("data-password", "true"), a(this).addClass("show-password"))
                        : (a(this).siblings("input").attr("type", "password"), a(this).attr("data-password", "false"), a(this).removeClass("show-password"));
                });
            }),
            (t.prototype.initMultiDropdown = function () {
                a(".dropdown-menu a.dropdown-toggle").on("click", function () {
                    return a(this).next().hasClass("show") || a(this).parents(".dropdown-menu").first().find(".show").removeClass("show"), a(this).next(".dropdown-menu").toggleClass("show"), !1;
                });
            }),
            (t.prototype.initSyntaxHighlight = function () {
                a(document).ready(function (t) {
                    document.querySelectorAll("pre span.escape").forEach(function (t, e) {
                        for (var a = 1 / 0, o = (t.classList.contains("escape"), t.innerText).replace(/^\n/, "").trimRight().split("\n"), n = 0; n < o.length; n++)
                            o[n].trim() && (a = Math.min(o[n].search(/\S/), a));
                        for (var i = [], n = 0; n < o.length; n++) i.push(o[n].replace(new RegExp("^ {" + a + "}", "g"), ""));
                        t.innerText = i.join("\n");
                    }),
                        document.querySelectorAll("pre span.escape").forEach(function (t) {
                            hljs.highlightBlock(t);
                        });
                });
            }),
            (t.prototype.init = function () {
                this.initTooltipPlugin(),
                    this.initPopoverPlugin(),
                    this.initToastPlugin(),
                    this.initFormValidation(),
                    this.initShowHidePassword(),
                    this.initMultiDropdown(),
                    this.initSyntaxHighlight();
            }),
            (a.Components = new t()),
            (a.Components.Constructor = t);
    })(window.jQuery),
    (function (n) {
        "use strict";
        function t() {
            (this.$body = n("body")), (this.$window = n(window));
        }
        (t.prototype.activateDefaultSidebarTheme = function () {
            n.LayoutThemeApp.activateDefaultSidebarTheme();
        }),
            (t.prototype.activateLightSidebarTheme = function () {
                n.LayoutThemeApp.activateLightSidebarTheme();
            }),
            (t.prototype.activateDarkSidebarTheme = function () {
                n.LayoutThemeApp.activateDarkSidebarTheme();
            }),
            (t.prototype.activateCondensedSidebar = function () {
                n.LayoutThemeApp.activateCondensedSidebar();
            }),
            (t.prototype.deactivateCondensedSidebar = function () {
                n.LayoutThemeApp.deactivateCondensedSidebar();
            }),
            (t.prototype.activateScrollableSidebar = function () {
                n.LayoutThemeApp.activateScrollableSidebar();
            }),
            (t.prototype.deactivateScrollableSidebar = function () {
                n.LayoutThemeApp.deactivateScrollableSidebar();
            }),
            (t.prototype.activateBoxed = function () {
                n.LayoutThemeApp.activateBoxed();
            }),
            (t.prototype.activateFluid = function () {
                n.LayoutThemeApp.activateFluid();
            }),
            (t.prototype.activateDarkMode = function () {
                n.LayoutThemeApp.activateDarkMode();
            }),
            (t.prototype.deactivateDarkMode = function () {
                n.LayoutThemeApp.deactivateDarkMode();
            }),
            (t.prototype.clearSavedConfig = function () {
                n.LayoutThemeApp.clearSavedConfig();
            }),
            (t.prototype.getLayoutConfig = function () {
                return n.LayoutThemeApp.getConfig();
            }),
            (t.prototype.resetLayout = function (t) {
                n.LayoutThemeApp.reset(t);
            }),
            (t.prototype.init = function () {
                n.LayoutThemeApp.init(),
                    setTimeout(function () {
                        document.body.classList.remove("loading"), n("[autofocus]").trigger("focus");
                    }, 400),
                    n.RightBar.init();
                var t = this.$body.data("layoutConfig");
                window.sessionStorage &&
                    t &&
                    t.hasOwnProperty("showRightSidebarOnStart") &&
                    t.showRightSidebarOnStart &&
                    (sessionStorage.getItem("_HYPER_VISITED_") || (n.RightBar.toggleRightSideBar(), sessionStorage.setItem("_HYPER_VISITED_", !0))),
                    n.Portlet.init(),
                    n.AdvanceFormApp.init(),
                    n.Components.init(),
                    n(window).on("load", function () {
                        n("#status").fadeOut(), n("#preloader").delay(350).fadeOut("slow");
                    });
                [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]')).map(function (t) {
                    return new bootstrap.Popover(t);
                }),
                    [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map(function (t) {
                        return new bootstrap.Tooltip(t, { trigger: "hover" });
                    }),
                    [].slice.call(document.querySelectorAll(".offcanvas")).map(function (t) {
                        return new bootstrap.Offcanvas(t);
                    });
                var e = document.getElementById("toastPlacement");
                e &&
                    document.getElementById("selectToastPlacement").addEventListener("change", function () {
                        e.dataset.originalClass || (e.dataset.originalClass = e.className), (e.className = e.dataset.originalClass + " " + this.value);
                    });
                [].slice.call(document.querySelectorAll(".toast")).map(function (t) {
                    return new bootstrap.Toast(t);
                });
                var o = document.getElementById("liveAlertPlaceholder"),
                    a = document.getElementById("liveAlertBtn");
                a &&
                    a.addEventListener("click", function () {
                        var t, e, a;
                        (t = "Nice, you triggered this alert message!"),
                            (e = "success"),
                            ((a = document.createElement("div")).innerHTML =
                                '<div class="alert alert-' +
                                e +
                                ' alert-dismissible" role="alert">' +
                                t +
                                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>'),
                            o.append(a);
                    }),
                    document.getElementById("app-style").href.includes("rtl.min.css") && (document.getElementsByTagName("html")[0].dir = "rtl");
            }),
            (n.App = new t()),
            (n.App.Constructor = t);
    })(window.jQuery),
    (function () {
        "use strict";
        window.jQuery.App.init();
    })();
//# sourceMappingURL=app.min.js.map
=======
"use strict";
function _typeof(e) {
  return (_typeof =
    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
      ? function (e) {
          return typeof e;
        }
      : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
}
function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(e, t) {
  for (var n = 0; n < t.length; n++) {
    var a = t[n];
    (a.enumerable = a.enumerable || !1), (a.configurable = !0), "value" in a && (a.writable = !0), Object.defineProperty(e, _toPropertyKey(a.key), a);
  }
}
function _createClass(e, t, n) {
  return (
    t && _defineProperties(e.prototype, t),
    n && _defineProperties(e, n),
    Object.defineProperty(e, "prototype", {
      writable: !1,
    }),
    e
  );
}
function _toPropertyKey(e) {
  e = _toPrimitive(e, "string");
  return "symbol" == _typeof(e) ? e : e + "";
}
function _toPrimitive(e, t) {
  if ("object" != _typeof(e) || !e) return e;
  var n = e[Symbol.toPrimitive];
  if (void 0 === n) return ("string" === t ? String : Number)(e);
  n = n.call(e, t || "default");
  if ("object" != _typeof(n)) return n;
  throw new TypeError("@@toPrimitive must return a primitive value.");
}
function _toConsumableArray(e) {
  return _arrayWithoutHoles(e) || _iterableToArray(e) || _unsupportedIterableToArray(e) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(e, t) {
  var n;
  if (e)
    return "string" == typeof e
      ? _arrayLikeToArray(e, t)
      : "Map" === (n = "Object" === (n = Object.prototype.toString.call(e).slice(8, -1)) && e.constructor ? e.constructor.name : n) || "Set" === n
      ? Array.from(e)
      : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
      ? _arrayLikeToArray(e, t)
      : void 0;
}
function _iterableToArray(e) {
  if (("undefined" != typeof Symbol && null != e[Symbol.iterator]) || null != e["@@iterator"]) return Array.from(e);
}
function _arrayWithoutHoles(e) {
  if (Array.isArray(e)) return _arrayLikeToArray(e);
}
function _arrayLikeToArray(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var n = 0, a = new Array(t); n < t; n++) a[n] = e[n];
  return a;
}
!(function (o) {
  function e() {
    o(window).on("load", function () {
      o("#status").fadeOut(), o("#preloader").delay(350).fadeOut("slow");
    }),
      lucide.createIcons();
    _toConsumableArray(document.querySelectorAll('[data-bs-toggle="popover"]')).map(function (e) {
      return new bootstrap.Popover(e);
    }),
      _toConsumableArray(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map(function (e) {
        return new bootstrap.Tooltip(e);
      }),
      _toConsumableArray(document.querySelectorAll(".offcanvas")).map(function (e) {
        return new bootstrap.Offcanvas(e);
      });
    var e = document.getElementById("toastPlacement");
    e &&
      document.getElementById("selectToastPlacement").addEventListener("change", function () {
        e.dataset.originalClass || (e.dataset.originalClass = e.className), (e.className = e.dataset.originalClass + " " + this.value);
      });
    [].slice.call(document.querySelectorAll(".toast")).map(function (e) {
      return new bootstrap.Toast(e);
    });
    var a = document.getElementById("liveAlertPlaceholder"),
      t = document.getElementById("liveAlertBtn");
    t &&
      t.addEventListener("click", function () {
        var e, t, n;
        (e = "Nice, you triggered this alert message!"),
          (t = "success"),
          ((n = document.createElement("div")).innerHTML = [
            '<div class="alert alert-'.concat(t, ' alert-dismissible" role="alert">'),
            "   <div>".concat(e, "</div>"),
            '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
            "</div>",
          ].join("")),
          a.append(n);
      }),
      document.getElementById("app-style").href.includes("rtl.min.css") && (document.getElementsByTagName("html")[0].dir = "rtl");
  }
  function t() {
    var c, e;
    o(".side-nav").length &&
      ((c = function (e, t, n, a) {
        return (e /= a / 2) < 1 ? (n / 2) * e * e + t : (-n / 2) * (--e * (e - 2) - 1) + t;
      }),
      (e = o(".side-nav li .collapse")),
      o(".side-nav li [data-bs-toggle='collapse']").on("click", function (e) {
        return !1;
      }),
      e.on({
        "show.bs.collapse": function (e) {
          var t = o(e.target).parents(".collapse.show");
          o(".side-nav .collapse.show").not(e.target).not(t).collapse("hide");
        },
      }),
      o(".side-nav a").each(function () {
        var e = window.location.href.split(/[?#]/)[0];
        this.href == e &&
          (o(this).addClass("active"),
          o(this).parent().addClass("menuitem-active"),
          o(this).parent().parent().parent().addClass("show"),
          o(this).parent().parent().parent().parent().addClass("menuitem-active"),
          "sidebar-menu" !== (e = o(this).parent().parent().parent().parent().parent().parent()).attr("id") && e.addClass("show"),
          o(this).parent().parent().parent().parent().parent().parent().parent().addClass("menuitem-active"),
          "wrapper" !== (e = o(this).parent().parent().parent().parent().parent().parent().parent().parent().parent()).attr("id") && e.addClass("show"),
          (e = o(this).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent()).is("body") || e.addClass("menuitem-active"));
      }),
      setTimeout(function () {
        var e,
          n,
          a,
          o,
          r,
          i,
          t = document.querySelector("li.menuitem-active .active");
        null != t &&
          ((e = document.querySelector(".leftside-menu .simplebar-content-wrapper")), (t = t.offsetTop - 300), e) &&
          100 < t &&
          ((a = 600),
          (o = (n = e).scrollTop),
          (r = t - o),
          (i = 0),
          (function e() {
            var t = c((i += 20), o, r, a);
            (n.scrollTop = t), i < a && setTimeout(e, 20);
          })());
      }, 200));
  }
  var n, a, r, i;
  e(),
    o(document).on("click", '.card a[data-bs-toggle="remove"]', function (e) {
      e.preventDefault();
      var e = o(this).closest(".card"),
        t = e.parent();
      e.remove(), 0 == t.children().length && t.remove();
    }),
    o(document).on("click", '.card a[data-bs-toggle="reload"]', function (e) {
      e.preventDefault();
      var e = o(this).closest(".card"),
        t = (e.append('<div class="card-disabled"><div class="card-portlets-loader"></div></div>'), e.find(".card-disabled"));
      setTimeout(function () {
        t.fadeOut("fast", function () {
          t.remove();
        });
      }, 500 + 5 * Math.random() * 300);
    }),
    o(".dropdown-menu a.dropdown-toggle").on("click", function () {
      var e = o(this).next(".dropdown-menu"),
        e = o(this).parent().parent().find(".dropdown-menu").not(e);
      return e.removeClass("show"), e.parent().find(".dropdown-toggle").removeClass("show"), !1;
    }),
    t(),
    o(".navbar-nav").length &&
      (o(".navbar-nav li a").each(function () {
        var e = window.location.href.split(/[?#]/)[0];
        this.href == e &&
          (o(this).addClass("active"),
          o(this).parent().parent().addClass("active"),
          o(this).parent().parent().parent().parent().addClass("active"),
          o(this).parent().parent().parent().parent().parent().parent().addClass("active"));
      }),
      o(".navbar-toggle").on("click", function () {
        o(this).toggleClass("open"), o("#navigation").slideToggle(400);
      })),
    (n = o(".navbar-custom .dropdown:not(.app-search)")),
    o(document).on("click", function (e) {
      return "top-search" == e.target.id || e.target.closest("#search-dropdown") ? o("#search-dropdown").addClass("d-block") : o("#search-dropdown").removeClass("d-block"), !0;
    }),
    o("#top-search").on("focus", function (e) {
      return e.preventDefault(), n.children(".dropdown-menu.show").removeClass("show"), o("#search-dropdown").addClass("d-block"), !1;
    }),
    n.on("show.bs.dropdown", function () {
      o("#search-dropdown").removeClass("d-block");
    }),
    (a = document.querySelector('[data-toggle="fullscreen"]')) &&
      a.addEventListener("click", function (e) {
        e.preventDefault(),
          document.body.classList.toggle("fullscreen-enable"),
          document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement
            ? document.cancelFullScreen
              ? document.cancelFullScreen()
              : document.mozCancelFullScreen
              ? document.mozCancelFullScreen()
              : document.webkitCancelFullScreen && document.webkitCancelFullScreen()
            : document.documentElement.requestFullscreen
            ? document.documentElement.requestFullscreen()
            : document.documentElement.mozRequestFullScreen
            ? document.documentElement.mozRequestFullScreen()
            : document.documentElement.webkitRequestFullscreen && document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
      }),
    o("[data-password]").on("click", function () {
      "false" == o(this).attr("data-password")
        ? (o(this).siblings("input").attr("type", "text"), o(this).attr("data-password", "true"), o(this).addClass("show-password"))
        : (o(this).siblings("input").attr("type", "password"), o(this).attr("data-password", "false"), o(this).removeClass("show-password"));
    }),
    document.querySelectorAll(".needs-validation").forEach(function (t) {
      t.addEventListener(
        "submit",
        function (e) {
          t.checkValidity() || (e.preventDefault(), e.stopPropagation()), t.classList.add("was-validated");
        },
        !1
      );
    }),
    jQuery().select2 && o('[data-toggle="select2"]').select2(),
    jQuery().mask &&
      o('[data-toggle="input-mask"]').each(function (e, t) {
        var n = o(t).data("maskFormat"),
          a = o(t).data("reverse");
        null != a
          ? o(t).mask(n, {
              reverse: a,
            })
          : o(t).mask(n);
      }),
    jQuery().daterangepicker &&
      ((r = {
        startDate: moment().subtract(29, "days"),
        endDate: moment(),
        ranges: {
          Today: [moment(), moment()],
          Yesterday: [moment().subtract(1, "days"), moment().subtract(1, "days")],
          "Last 7 Days": [moment().subtract(6, "days"), moment()],
          "Last 30 Days": [moment().subtract(29, "days"), moment()],
          "This Month": [moment().startOf("month"), moment().endOf("month")],
          "Last Month": [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")],
        },
      }),
      o('[data-toggle="date-picker-range"]').each(function (e, t) {
        var n = o.extend({}, r, o(t).data()),
          a = n.targetDisplay;
        o(t).daterangepicker(n, function (e, t) {
          a && o(a).html(e.format("MMMM D, YYYY") + " - " + t.format("MMMM D, YYYY"));
        });
      }),
      (i = {
        cancelClass: "btn-light",
        applyButtonClasses: "btn-success",
      }),
      o('[data-toggle="date-picker"]').each(function (e, t) {
        var n = o.extend({}, i, o(t).data());
        o(t).daterangepicker(n);
      })),
    jQuery().timepicker &&
      ((i = {
        showSeconds: !0,
        icons: {
          up: "mdi mdi-chevron-up",
          down: "mdi mdi-chevron-down",
        },
      }),
      o('[data-toggle="timepicker"]').each(function (e, t) {
        var n = o.extend({}, i, o(t).data());
        o(t).timepicker(n);
      })),
    jQuery().TouchSpin &&
      ((i = {}),
      o('[data-toggle="touchspin"]').each(function (e, t) {
        var n = o.extend({}, i, o(t).data());
        o(t).TouchSpin(n);
      })),
    jQuery().maxlength &&
      ((i = {
        warningClass: "badge bg-success",
        limitReachedClass: "badge bg-danger",
        separator: " out of ",
        preText: "You typed ",
        postText: " chars available.",
        placement: "bottom",
      }),
      o('[data-toggle="maxlength"]').each(function (e, t) {
        var n = o.extend({}, i, o(t).data());
        o(t).maxlength(n);
      }));
})(jQuery);
var ThemeCustomizer = (function () {
  return _createClass(
    function e() {
      _classCallCheck(this, e), (this.html = document.getElementsByTagName("html")[0]), (this.config = {}), (this.defaultConfig = window.config);
    },
    [
      {
        key: "initConfig",
        value: function () {
          (this.defaultConfig = JSON.parse(JSON.stringify(window.defaultConfig))), (this.config = JSON.parse(JSON.stringify(window.config))), this.setSwitchFromConfig();
        },
      },
      {
        key: "changeMenuColor",
        value: function (e) {
          (this.config.menu.color = e), this.html.setAttribute("data-menu-color", e), this.setSwitchFromConfig();
        },
      },
      {
        key: "changeLeftbarSize",
        value: function (e) {
          var t = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1];
          this.html.setAttribute("data-sidenav-size", e), t && ((this.config.sidenav.size = e), this.setSwitchFromConfig());
        },
      },
      {
        key: "changeLayoutMode",
        value: function (e) {
          var t = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1];
          this.html.setAttribute("data-layout-mode", e), t && ((this.config.layout.mode = e), this.setSwitchFromConfig());
        },
      },
      {
        key: "changeLayoutPosition",
        value: function (e) {
          (this.config.layout.position = e), this.html.setAttribute("data-layout-position", e), this.setSwitchFromConfig();
        },
      },
      {
        key: "changeLayoutColor",
        value: function (e) {
          (this.config.theme = e), this.html.setAttribute("data-bs-theme", e), this.setSwitchFromConfig();
        },
      },
      {
        key: "changeTopbarColor",
        value: function (e) {
          (this.config.topbar.color = e), this.html.setAttribute("data-topbar-color", e), this.setSwitchFromConfig();
        },
      },
      {
        key: "changeSidebarUser",
        value: function (e) {
          (this.config.sidenav.user = e) ? this.html.setAttribute("data-sidenav-user", e) : this.html.removeAttribute("data-sidenav-user"), this.setSwitchFromConfig();
        },
      },
      {
        key: "resetTheme",
        value: function () {
          (this.config = JSON.parse(JSON.stringify(window.defaultConfig))),
            this.changeMenuColor(this.config.menu.color),
            this.changeLeftbarSize(this.config.sidenav.size),
            this.changeLayoutColor(this.config.theme),
            this.changeLayoutMode(this.config.layout.mode),
            this.changeLayoutPosition(this.config.layout.position),
            this.changeTopbarColor(this.config.topbar.color),
            this.changeSidebarUser(this.config.sidenav.user),
            this._adjustLayout();
        },
      },
      {
        key: "initSwitchListener",
        value: function () {
          var n = this,
            e =
              (document.querySelectorAll("input[name=data-menu-color]").forEach(function (t) {
                t.addEventListener("change", function (e) {
                  n.changeMenuColor(t.value);
                });
              }),
              document.querySelectorAll("input[name=data-sidenav-size]").forEach(function (t) {
                t.addEventListener("change", function (e) {
                  n.changeLeftbarSize(t.value);
                });
              }),
              document.querySelectorAll("input[name=data-bs-theme]").forEach(function (t) {
                t.addEventListener("change", function (e) {
                  n.changeLayoutColor(t.value);
                });
              }),
              document.querySelectorAll("input[name=data-layout-mode]").forEach(function (t) {
                t.addEventListener("change", function (e) {
                  n.changeLayoutMode(t.value);
                });
              }),
              document.querySelectorAll("input[name=data-layout-position]").forEach(function (t) {
                t.addEventListener("change", function (e) {
                  n.changeLayoutPosition(t.value);
                });
              }),
              document.querySelectorAll("input[name=data-layout]").forEach(function (t) {
                t.addEventListener("change", function (e) {
                  window.location = "horizontal" === t.value ? "layouts-horizontal.html" : "index.html";
                });
              }),
              document.querySelectorAll("input[name=data-topbar-color]").forEach(function (t) {
                t.addEventListener("change", function (e) {
                  n.changeTopbarColor(t.value);
                });
              }),
              document.querySelectorAll("input[name=sidebar-user]").forEach(function (t) {
                t.addEventListener("change", function (e) {
                  n.changeSidebarUser(t.checked);
                });
              }),
              document.getElementById("light-dark-mode")),
            e =
              (e &&
                e.addEventListener("click", function (e) {
                  "light" === n.config.theme ? n.changeLayoutColor("dark") : n.changeLayoutColor("light");
                }),
              document.querySelector("#reset-layout")),
            e =
              (e &&
                e.addEventListener("click", function (e) {
                  n.resetTheme();
                }),
              document.querySelector(".button-toggle-menu")),
            e =
              (e &&
                e.addEventListener("click", function () {
                  var e = n.config.sidenav.size,
                    t = n.html.getAttribute("data-sidenav-size", e);
                  "full" === t
                    ? n.showBackdrop()
                    : "fullscreen" == e
                    ? "fullscreen" === t
                      ? n.changeLeftbarSize("fullscreen" == e ? "default" : e, !1)
                      : n.changeLeftbarSize("fullscreen", !1)
                    : "condensed" === t
                    ? n.changeLeftbarSize("condensed" == e ? "default" : e, !1)
                    : n.changeLeftbarSize("condensed", !1),
                    n.html.classList.toggle("sidebar-enable");
                }),
              document.querySelector(".button-close-fullsidebar"));
          e &&
            e.addEventListener("click", function () {
              n.html.classList.remove("sidebar-enable"), n.hideBackdrop();
            }),
            document.querySelectorAll(".button-sm-hover").forEach(function (e) {
              e.addEventListener("click", function () {
                var e = n.config.sidenav.size;
                "sm-hover-active" === n.html.getAttribute("data-sidenav-size", e) ? n.changeLeftbarSize("sm-hover", !1) : n.changeLeftbarSize("sm-hover-active", !1);
              });
            });
        },
      },
      {
        key: "showBackdrop",
        value: function () {
          var e = document.createElement("div"),
            t =
              ((e.id = "custom-backdrop"),
              (e.classList = "offcanvas-backdrop fade show"),
              document.body.appendChild(e),
              (document.body.style.overflow = "hidden"),
              767 < window.innerWidth && (document.body.style.paddingRight = "15px"),
              this);
          e.addEventListener("click", function (e) {
            t.html.classList.remove("sidebar-enable"), t.hideBackdrop();
          });
        },
      },
      {
        key: "hideBackdrop",
        value: function () {
          var e = document.getElementById("custom-backdrop");
          e && (document.body.removeChild(e), (document.body.style.overflow = null), (document.body.style.paddingRight = null));
        },
      },
      {
        key: "initWindowSize",
        value: function () {
          var t = this;
          window.addEventListener("resize", function (e) {
            t._adjustLayout();
          });
        },
      },
      {
        key: "_adjustLayout",
        value: function () {
          var e = this;
          window.innerWidth <= 767.98
            ? e.changeLeftbarSize("full", !1)
            : 767 <= window.innerWidth && window.innerWidth <= 1140
            ? "full" !== e.config.sidenav.size &&
              "fullscreen" !== e.config.sidenav.size &&
              ("sm-hover" === e.config.sidenav.size ? e.changeLeftbarSize("condensed") : e.changeLeftbarSize("condensed", !1))
            : (e.changeLeftbarSize(e.config.sidenav.size), e.changeLayoutMode(e.config.layout.mode));
        },
      },
      {
        key: "setSwitchFromConfig",
        value: function () {
          sessionStorage.setItem("__HYPER_CONFIG__", JSON.stringify(this.config)),
            document.querySelectorAll(".right-bar input[type=checkbox]").forEach(function (e) {
              e.checked = !1;
            });
          var e,
            t,
            n,
            a,
            o,
            r,
            i,
            c,
            s = this.config;
          s &&
            ((e = document.querySelector("input[type=radio][name=data-layout][value=" + s.nav + "]")),
            (t = document.querySelector("input[type=radio][name=data-bs-theme][value=" + s.theme + "]")),
            (n = document.querySelector("input[type=radio][name=data-layout-mode][value=" + s.layout.mode + "]")),
            (a = document.querySelector("input[type=radio][name=data-topbar-color][value=" + s.topbar.color + "]")),
            (o = document.querySelector("input[type=radio][name=data-menu-color][value=" + s.menu.color + "]")),
            (r = document.querySelector("input[type=radio][name=data-sidenav-size][value=" + s.sidenav.size + "]")),
            (i = document.querySelector("input[type=radio][name=data-layout-position][value=" + s.layout.position + "]")),
            (c = document.querySelector("input[type=checkbox][name=sidebar-user]")),
            e && (e.checked = !0),
            t && (t.checked = !0),
            n && (n.checked = !0),
            a && (a.checked = !0),
            o && (o.checked = !0),
            r && (r.checked = !0),
            i && (i.checked = !0),
            c) &&
            "true" === s.sidenav.user.toString() &&
            (c.checked = !0);
        },
      },
      {
        key: "init",
        value: function () {
          this.initConfig(), this.initSwitchListener(), this.initWindowSize(), this._adjustLayout(), this.setSwitchFromConfig();
        },
      },
    ]
  );
})();
new ThemeCustomizer().init();
>>>>>>> ee31b0183e6c6cbf5bfcd74404eb141d4d901f0c
